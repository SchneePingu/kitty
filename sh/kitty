#!/usr/bin/env bash

main()
{
    scriptName=$(basename "$0")

    arguments=("$@")
    parseCommandLineArguments "${arguments[@]}"
    if hasError $?
    then
        exit 1
    fi

    searchPattern="${argumentsWithoutOptions[0]}"
    searchFileSystemForPattern "${searchPattern}"
}

parseCommandLineArguments()
{
    local exitCode=0

    initalizeCommandLineArguments

    local arguments=("$@")
    while hasArguments "${arguments[@]}"
    do
        parseCommandLineOptions "${arguments[@]}"
        exitCode=$?

        local numberOfParsedOptions=$((OPTIND - 1))
        # remove parsed options from arguments
        shift ${numberOfParsedOptions}
        unset OPTIND

        nextArgument="$1"
        argumentsWithoutOptions+=("${nextArgument}")
        # remove next argument from arguments
        shift

        arguments=("$@")
    done

    if ! hasSearchPattern "${argumentsWithoutOptions[@]}"
    then
        echo "${scriptName}: missing search pattern" 1>&2
    fi

    return ${exitCode}
}

initalizeCommandLineArguments()
{
    fileTypeOptions=()
    argumentsWithoutOptions=()
    searchFileContent=false
    displaySearchResultInVim=false
}

hasArguments()
{
    if [ $# -gt 0 ]
    then
        true
    else
        false
    fi
}

parseCommandLineOptions()
{
    local exitCode=0

    local optstring
    optstring=$(getOptstringForGetopts)
    local arguments=("$@")

    while getopts "${optstring}" option "${arguments[@]}"
    do
        setOption "${option}"
        exitCode=$?
    done

    return ${exitCode}
}

getOptstringForGetopts()
{
    local noErrorMessageFromGetopts=':'
    local listOfValidOptions="cdfv"

    local optstring=${noErrorMessageFromGetopts}${listOfValidOptions}
    echo ${optstring}
}

setOption()
{
    local option=$1

    if ! isValidOption "${option}"
    then
        local invalidOption=${OPTARG}
        echo "${scriptName}: invalid option '${invalidOption}'" 1>&2
        return 1
    fi

    case ${option} in
        c ) searchFileContent=true ;;
        d ) fileTypeOptions+=('d') ;;
        f ) fileTypeOptions+=('f') ;;
        v ) displaySearchResultInVim=true ;;
    esac

    return 0
}

isValidOption()
{
    local option=$1

    if [ "${option}" = '?' ]
    then
        return 1
    else
        return 0
    fi
}

hasSearchPattern()
{
    arguments=("$@")
    if hasArguments "${arguments[@]}"
    then
        true
    else
        false
    fi
}

hasError()
{
    exitCode=$?
    if [ ${exitCode} -gt 0 ]
    then
        true
    else
        false
    fi
}

searchFileSystemForPattern()
{
    local searchPattern="$1"

    # This construct is not looking clean,
    # but refactoring the '-exec' and '-name' options causes issues,
    # due to the wildcards being extended by bash.
    if ${searchFileContent}
    then
        local colorOption
        find    . \
                -not -path "*/\.*" \
                -type "$(getListOfFileTypes)" \
                -exec grep -nHEs -C 1 ".*${searchPattern}.*" {} +
    else
        find    . \
                -not -path "*/\.*" \
                -type "$(getListOfFileTypes)" \
                -name "*${searchPattern}*"
    fi | displaySearchResult "${searchPattern}"
}

getListOfFileTypes()
{
    if "${searchFileContent}"
    then
        echo 'f'
    else
        echo "${fileTypeOptions[@]}" | replaceWhitespaceByComma
    fi
}

replaceWhitespaceByComma()
{
    tr ' ' ','
}

hasVimInstallation()
{
    if [[ -z "$(command -v vim)" ]]
    then
        false
    else
        true
    fi
}

displaySearchResult()
{
    if ${displaySearchResultInVim} && hasVimInstallation
    then
        local closeVimIfEmptySearchResult='exe !search(".")?"quit!":""'
        local loadKittyVimPlugin=':packadd kitty'
        local searchPattern="$1"
        local defineSearchPattern=":let kittySearchPattern = \"${searchPattern}\""
        local moveCursorToFirstSearchResult=':call KittyGoToNextSearchResult()'
        local suppressReadingFromStdinMessage='--not-a-term'

        vim "+${closeVimIfEmptySearchResult}"\
            "+${loadKittyVimPlugin}" \
            "+${defineSearchPattern}" \
            "+${moveCursorToFirstSearchResult}" \
            "${suppressReadingFromStdinMessage}" \
            -
    else
        cat
    fi
}


main "$@"
